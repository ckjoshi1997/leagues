{"version":3,"sources":["profile.jpg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","title","style","backgroundColor","color","fontSize","textAlign","margin","width","border","padding","Photo","picture","display","marginLeft","marginRight","borderRadius","src","App","React","useState","api","teams","setTeams","useEffect","a","fetch","headers","then","response","json","data","getTeams","Chinmay","Table","striped","bordered","hover","map","team","team_id","name","logo","venue_city","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,qC,2ECA3CD,EAAOC,QAAU,IAA0B,kC,uKCM3C,SAASC,EAAT,GAA4B,IAAVC,EAAS,EAATA,MAChB,OACE,yBACEC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,QACPC,SAAU,OACVC,UAAW,SACXC,OAAQ,OACRC,MAAO,MACPC,OAAQ,qBACRC,QAAS,SAGVT,GAKP,SAASU,EAAT,GAA6B,IAAZC,EAAW,EAAXA,QACf,OACE,oCACE,yBACEV,MAAO,CACLM,MAAO,MACPK,QAAS,QACTC,WAAY,OACZC,YAAa,OACbC,aAAc,OAEhBC,IAAKL,IAEP,yBACEV,MAAO,CACLC,gBAAiB,QACjBC,MAAO,QAGPE,UAAW,SACXC,OAAQ,OACRC,MAAO,MACPC,OAAQ,mBACRC,QAAS,SAVb,yBAqGSQ,MApEf,WAAgB,IAAD,EACaC,IAAMC,SAAS,CACvCC,IAAK,CACHC,MAAO,MAHE,mBACNA,EADM,KACCC,EADD,KA4Bb,OArBAJ,IAAMK,WAAU,WAgBd,OAdc,uCAAG,sBAAAC,EAAA,sDAQfC,MAAM,4DAPS,CACbC,QAAS,CACP,kBAAmB,iCACnB,iBACE,wDAIHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUR,EAASQ,MAVZ,2CAAH,oDAYdC,GAEO,YACI,KAEV,IAGD,oCACE,kBAAChC,EAAD,CAAQC,MAAM,4BACd,kBAACU,EAAD,CAAOC,QAASqB,MAChB,kBAACC,EAAA,EAAD,CACEhC,MAAO,CACLM,MAAO,MACPK,QAAS,QACTC,WAAY,OACZC,YAAa,QAEfoB,SAAO,EACPC,UAAQ,EACRC,OAAK,GAEL,+BACE,4BACE,uCACA,yCACA,oCACA,sCAGJ,+BACGf,EAAMD,IAAIC,MAAMgB,KAAI,SAACC,GAAD,OACnB,4BACE,4BAAKA,EAAKC,SACV,4BAAKD,EAAKE,MACV,4BACE,yBAAKxB,IAAKsB,EAAKG,QAEjB,4BAAKH,EAAKI,oBCtHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d81bdcf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.930399f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Chinmay from \"./profile.jpg\";\nimport \"./App.css\";\nimport Table from \"react-bootstrap/Table\";\n\nfunction Header({ title }) {\n  return (\n    <div\n      style={{\n        backgroundColor: \"#e3fcfc\",\n        color: \"black\",\n        fontSize: \"30px\",\n        textAlign: \"center\",\n        margin: \"auto\",\n        width: \"50%\",\n        border: \"10px solid #42f5f2\",\n        padding: \"20px\",\n      }}\n    >\n      {title}\n    </div>\n  );\n}\n\nfunction Photo({ picture }) {\n  return (\n    <>\n      <img\n        style={{\n          width: \"40%\",\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          borderRadius: \"80%\",\n        }}\n        src={picture}\n      />\n      <div\n        style={{\n          backgroundColor: \"black\",\n          color: \"white\",\n          //height: \"50px\",\n          //fontSize: \"30px\",\n          textAlign: \"center\",\n          margin: \"auto\",\n          width: \"50%\",\n          border: \"10px solid black\",\n          padding: \"20px\",\n        }}\n      >\n        Premier League Teams\n      </div>\n    </>\n  );\n}\n\nfunction Card({ title, body, color }) {\n  return (\n    <div\n      style={{\n        backgroundColor: color,\n      }}\n    >\n      {title}\n      <br />\n      {body}\n    </div>\n  );\n}\n\nfunction App() {\n  const [teams, setTeams] = React.useState({\n    api: {\n      teams: [],\n    },\n  });\n\n  React.useEffect(() => {\n    let ignore = false;\n    const getTeams = async () => {\n      const config = {\n        headers: {\n          \"x-rapidapi-host\": \"api-football-v1.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"1b32d3f8d0mshacd6693ab08b115p16a018jsnbc27b9212b41\",\n        },\n      };\n      fetch(\"https://api-football-v1.p.rapidapi.com/v2/teams/league/2/\", config)\n        .then((response) => response.json())\n        .then((data) => setTeams(data));\n    };\n    getTeams();\n\n    return () => {\n      ignore = true;\n    };\n  }, []);\n\n  return (\n    <>\n      <Header title=\"Chinmay's first website\" />\n      <Photo picture={Chinmay} />\n      <Table\n        style={{\n          width: \"40%\",\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n        striped\n        bordered\n        hover\n      >\n        <thead>\n          <tr>\n            <th>Team ID</th>\n            <th>Team Name</th>\n            <th>Logo</th>\n            <th>City</th>\n          </tr>\n        </thead>\n        <tbody>\n          {teams.api.teams.map((team) => (\n            <tr>\n              <td>{team.team_id}</td>\n              <td>{team.name}</td>\n              <td>\n                <img src={team.logo} />\n              </td>\n              <td>{team.venue_city}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}